import pygame
import random
import os

WIDTH = 1000
HEIGHT = 600
FPS = 30
GROUND = HEIGHT
SLOW = 3
FAST = 8

PLAYER_ACC = 0.5
PLAYER_FRICTION = -0.12
PLAYER_GRAV = 0.5
vec = pygame.math.Vector2
                                                                                                                                                                                                                                                                                                                                                                                                                                       
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
GRAY = (165, 165, 165)

game_folder = os.path.dirname(__file__)
img_folder = os.path.join(game_folder, "Banana__Jump__Pictures")
snd_folder = os.path.join(game_folder, "Banana__Jump__Sounds")

def show_start_screen():
    
    background = pygame.image.load(os.path.join(img_folder, "Title_Screen.png")).convert()
    background = pygame.transform.scale(background, (WIDTH, HEIGHT))
    background_rect = background.get_rect()
    screen.blit(background, background_rect)
    pygame.display.flip()
    waiting = True
    while waiting:
        clock.tick(FPS)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.KEYUP:
                waiting = False

class Player(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(os.path.join(img_folder, "monkey_0.png")).convert()
        self.image = pygame.transform.scale(self.image, (200, 200))
        self.image.set_colorkey(GREEN)
        self.rect = self.image.get_rect()
        self.radius = 20
        self.rect.centerx = WIDTH / 2
        self.rect.bottom = HEIGHT - 10
        self.speedx = 0
        self.shield = 100
        self.shoot_delay = 500
        self.last_shot = pygame.time.get_ticks()

        self.pos = vec(10, GROUND - 60)
        self.vel = vec(0, 0)
        self.acc = vec(0, 0)



    def update(self):
        self.speedx = 0

        self.acc = vec(0, PLAYER_GRAV)

        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_RIGHT]:
            self.acc.x += 2
        if keystate[pygame.K_LEFT]:
            self.acc.x += -2
        if self.pos.y >= GROUND and keystate[pygame.K_UP]:
            self.vel.y = -20
        if keystate[pygame.K_SPACE]:
            self.shoot()

        self.rect.x += self.speedx
        
        self.acc.x += self.vel.x * PLAYER_FRICTION

        self.vel += self.acc
        self.pos += self.vel + 0.5  *  self.acc

        if self.pos.x > WIDTH:
             self.pos.x = WIDTH
        if self.pos.x < 0:
             self.pos.x = 0

        if self.pos.y > GROUND:
             self.pos.y = GROUND + 1
             self.vel.y = 0

        self.rect.midbottom = self.pos

    def shoot(self):
            now = pygame.time.get_ticks()
            if now - self.last_shot >self.shoot_delay:
                self.last_shot = now
                rocket = Rocket(self.rect.right, self.rect.centery)
                all_sprites.add(rocket)
                rockets.add(rocket)

class Rocket(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)

        self.rockets = [
            pygame.image.load(os.path.join(img_folder, "Rocket0.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "Rocket1.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "Rocket2.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "Rocket3.png")).convert()]

        self.rocket_count = 0
        
        self.image = self.rockets[self.rocket_count]
        self.image = pygame.transform.scale(self.image, (100, 50))
        self.image.set_colorkey(GRAY)

        self.rect = self.image.get_rect()
        self.rect.bottom = y
        self.rect.centerx = x
        self.speedx = 50

    def update(self):
        self.rect.x += self.speedx

        self.image = self.rockets[self.rocket_count]
        self.image = pygame.transform.scale(self.image, (100, 50))
        self.image.set_colorkey(GRAY)

        self.rocket_count += 1
        if self.rocket_count > 3:
            self.rocket_count = 0
            
        if self.rect.left > WIDTH:
            self.kill()

class Banana(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        
        self.banana = [
            pygame.image.load(os.path.join(img_folder, "RottenBanana0.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "RottenBanana1.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "RottenBanana2.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "RottenBanana3.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "RottenBanana4.png")).convert(),
            pygame.image.load(os.path.join(img_folder, "RottenBanana5.png")).convert()]

        self.banana_count = 0

        self.image = self.banana[self.banana_count]
        self.image = pygame.transform.scale(self.image, (110, 100))
        self.image.set_colorkey(BLACK)

        self.rect = self.image.get_rect()
        self.rect.x = random.randrange(WIDTH, WIDTH + 400)
        self.rect.y = random.randrange(0, HEIGHT - self.rect.height)
        self.speedx = random.randrange(3, 10)
        
    def update(self):
        self.rect.x -= self.speedx

        self.image = self.banana[self.banana_count]
        self.image = pygame.transform.scale(self.image, (110, 100))
        self.image.set_colorkey(BLACK)

        self.banana_count += 1
        if self.banana_count > 5:
            self.banana_count = 0
            
        if self.rect.right < 0:
            self.kill()
        
pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Banana Jump")

clock = pygame.time.Clock()

pop = pygame.mixer.Sound(os.path.join(snd_folder, "pop.wav"))

all_sprites = pygame.sprite.Group()
rockets = pygame.sprite.Group()
bananas = pygame.sprite.Group()

player = Player()
all_sprites.add(player)

def newBanana():
    b = Banana()
    all_sprites.add(b)
    bananas.add(b)

newBanana()

bkgr_image = pygame.image.load(os.path.join(img_folder, "Jungle-Background.png")).convert()
background = pygame.transform.scale(bkgr_image, (WIDTH, HEIGHT))
background_rect = background.get_rect()

bkgr_x = 0

start = True
running = True
while running:
    
    if start:
        show_start_screen()
        start = False
    
    clock.tick(FPS)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    if len(bananas) < 8:
        newBanana()
    
    all_sprites.update()

    hits = pygame.sprite.groupcollide(bananas, rockets, True, True)
    for hit in hits:
        newBanana()
        pop.play()
    
    rel_x = bkgr_x % background.get_rect().width
    screen.blit(background, (rel_x - background.get_rect().width, 0))
    if rel_x < WIDTH:
        screen.blit(background, (rel_x, 0))
    bkgr_x -= 3
    
    all_sprites.draw(screen)

    pygame.display.flip()

pygame.quit()
